package gen

import (
	"bytes"
	"strings"
	"text/template"
	"time"

	"github.com/pkg/errors"

	"github.com/lonnblad/go-service-doc/core"
)

type Gen struct {
	pages       core.Pages
	staticFiles core.Files
	css         string
	basePath    string
}

func New() *Gen {
	return &Gen{}
}

func (g *Gen) WithPages(pages core.Pages) *Gen {
	for _, page := range pages {
		page.HTML = strings.ReplaceAll(page.HTML, "`", "` + \"`\" + `")
		g.pages = append(g.pages, page)
	}
	return g
}

func (g *Gen) WithStaticFiles(files core.Files) *Gen {
	g.staticFiles = files
	return g
}

func (g *Gen) WithCSS(css string) *Gen {
	g.css = css
	return g
}

func (g *Gen) WithBasePath(basePath string) *Gen {
	g.basePath = basePath
	return g
}

func (g *Gen) Build() (_ []byte, err error) {
	templateInfo := struct {
		Timestamp   time.Time
		Pages       core.Pages
		StaticFiles core.Files
		CSS         string
		BasePath    string
	}{
		Timestamp:   time.Now(),
		Pages:       g.pages,
		StaticFiles: g.staticFiles,
		CSS:         g.css,
		BasePath:    g.basePath,
	}

	generator, err := template.New("go_pkg").Parse(packageTemplate)
	if err != nil {
		err = errors.Wrapf(err, "failed to parse package template")
		return
	}

	buffer := &bytes.Buffer{}
	err = generator.Execute(buffer, templateInfo)
	if err != nil {
		err = errors.Wrapf(err, "failed to execute generator")
		return
	}

	return buffer.Bytes(), nil
}

const packageTemplate = `// This file was generated by lonnblad/go-service-doc at
// {{ .Timestamp }}
package docs

import "net/http"

const contentType = "Content-Type"
const mimeHTML = "text/html"
const mimeCSS = "text/css"

func Handler() http.Handler {
	mux := http.NewServeMux()
	mux.HandleFunc("{{.BasePath}}/markdown.css", cssHandler)

{{- range .Pages}}
	mux.HandleFunc("{{.WebPath}}", {{.Name}}Handler)
{{- end}}

{{- range .StaticFiles}}
	mux.HandleFunc("{{.Path}}", {{.Name}}Handler)
{{- end}}

	return mux
}

func cssHandler(w http.ResponseWriter, req *http.Request) {
	w.Header().Set(contentType, mimeCSS)
	// nolint: errcheck
	w.Write([]byte(` + "`{{.CSS}}`" + `))
}

{{- range .Pages}}

// nolint: golint
func {{.Name}}Handler(w http.ResponseWriter, req *http.Request) {
	w.Header().Set(contentType, mimeHTML)

	// nolint: errcheck
	w.Write([]byte(` + "`{{.HTML}}`" + `))
}
{{- end}}

{{- range .StaticFiles}}

// nolint: golint
func {{.Name}}Handler(w http.ResponseWriter, req *http.Request) {
	w.Header().Set(contentType, "{{.ContentType}}")

	// nolint: errcheck
	w.Write([]byte(` + "`{{.Content}}`" + `))
}
{{- end}}
`
